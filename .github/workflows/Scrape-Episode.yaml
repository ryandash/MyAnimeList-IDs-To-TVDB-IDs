name: Scrape TVDB Episode

on:
  repository_dispatch:
    types: [scrape-episode]

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Remove old data folders
        run: rm -rf anime_data api

      - name: Setup Python & Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install

      - name: Run scraper
        run: python "Scrape_an_episode.py" --episode ${{ github.event.client_payload.tvdb_id }}

      - name: Map MAL IDs
        run: python mal_mapper.py --page 1

      - name: Run Split JSON & Stash Results
        run: |
          python split_json.py
          mkdir -p /tmp/scraper-out
          cp -r anime_data api /tmp/scraper-out/ || true
          cp mapped-tvdb-ids.json unmapped-tvdb-ids.json /tmp/scraper-out/ || true

      - name: Checkout Repository (fresh)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Restore & Merge Scraper Output
        run: |
          # Helper function to merge JSON files
          merge_json() {
            target="$1"
            shift
            files="$@"
            if [ -f "$target" ]; then
              jq -s '
                map(if type=="array" then .[] else . end)
                | sort_by(.tvdb_id)
                | unique_by(.tvdb_id)
              ' "$target" $files > "$target.tmp" && mv "$target.tmp" "$target"
            else
              cp "$files" "$target"
            fi
          }

          # Ensure base folders exist
          mkdir -p api anime_data

          # Merge folder JSONs
          for folder in api anime_data; do
            if [ -d "/tmp/scraper-out/$folder" ]; then
              find "/tmp/scraper-out/$folder" -type f -name "*.json" | while read -r file; do
                target="$folder/$(basename "$file")"
                echo "Merging $file → $target"
                merge_json "$target" "$file"
              done
            fi
          done

          # Merge root-level JSONs
          for file in mapped-tvdb-ids.json unmapped-tvdb-ids.json; do
            files=$(find /tmp/scraper-out -type f -name "$file")
            if [ -f "$file" ]; then
              files="$file $files"
            fi
            if [ -n "$files" ]; then
              echo "Merging $files → $file"
              merge_json "$file" $files
              total=$(jq 'length' "$file")
              echo "Merged '$file' → $total unique entries"
            fi
          done

      - name: Update README with counts
        run: |
          mapped=$(jq length mapped-tvdb-ids.json)
          unmapped=$(jq length unmapped-tvdb-ids.json)
          sed -i '/<!---counts-start--->/,/<!---counts-end--->/d' README.md
          {
            echo '<!---counts-start--->'
            echo "### TVDB → MAL Mapping Stats"
            echo ""
            echo "- ✅ Mapped IDs: **$mapped**"
            echo "- ❌ Unmapped IDs: **$unmapped**"
            echo '<!---counts-end--->'
          } >> README.md

      - name: Commit Changes if Needed
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "GitHub Actions Bot"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Update JSON ($(date -u))"
            git pull --rebase origin main
            git push origin HEAD:main
          else
            echo "No changes detected."
          fi
